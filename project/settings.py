"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import json

load_dotenv()

DB_TYPE = os.environ.get('DB_TYPE', 'oracle')

if DB_TYPE == 'oracle':
    try:
        import oracledb
        # This path is internal to the Docker container
        oracledb.init_oracle_client(lib_dir="/opt/oracle/instantclient_19_3")
    except ImportError:
        raise ImportError("The 'oracledb' library is required but not installed. Add it to requirements.txt.")
    except Exception as e:
        print(f"WARNING: Could not initialize Oracle client: {e}")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

HOSPITAL_CONFIG_PATH = os.environ.get('HOSPITAL_CONFIG_PATH')
HOSPITAL_CONFIG = {}
if HOSPITAL_CONFIG_PATH:
    config_full_path = HOSPITAL_CONFIG_PATH if os.path.isabs(HOSPITAL_CONFIG_PATH) else os.path.join(BASE_DIR, HOSPITAL_CONFIG_PATH)
    try:
        with open(config_full_path, 'r', encoding='utf-8') as f:
            HOSPITAL_CONFIG = json.load(f)
    except FileNotFoundError:
        # UPDATED: Translated warning
        print(f"WARNING: Configuration file not found at: {config_full_path}")
    except json.JSONDecodeError:
        # UPDATED: Translated warning
        print(f"WARNING: Error decoding JSON from config file: {config_full_path}")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-default-key-for-dev-only')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False').lower() in ['true', '1']

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ward_data_app',  
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# --- Database Configuration ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_ROUTERS = ['project.dbrouters.HospitalRouter']

DB_ENGINES = {
    'oracle': 'django.db.backends.oracle',
    'postgres': 'django.db.backends.postgresql',
    'sqlserver': 'mssql', 
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/app/data/db.sqlite3', # Internal Docker path for user/session data
    },
    'hospital': {
        'ENGINE': DB_ENGINES.get(DB_TYPE, 'django.db.backends.oracle'),
        'NAME': os.environ.get('SQL_DB_NAME'),
        'USER': os.environ.get('SQL_USER'),
        'PASSWORD': os.environ.get('SQL_PASSWORD'),
        'HOST': os.environ.get('SQL_HOST'),
        'PORT': os.environ.get('SQL_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us' 
TIME_ZONE = 'Europe/Lisbon'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Celery Configuration ---
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# --- Celery Beat (Scheduled Tasks) ---
BACKUP_INTERVAL_SECONDS = int(os.environ.get('BACKUP_INTERVAL', 7200))
CELERY_BEAT_SCHEDULE = {
    'generate-periodic-pdf-backup': {
        'task': 'ward_data_app.tasks.generate_periodic_pdf_backup',
        'schedule': float(BACKUP_INTERVAL_SECONDS),
    },
}

# --- Application Settings ---
OFFLINE_BACKUP_DIR = os.environ.get('OFFLINE_BACKUP_DIR', '/app/pdfs')
LOG_PATH = os.environ.get('LOG_PATH', '/app/logs')

# --- Authentication Settings ---
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
# UPDATED: Changed from '/contas/login'
LOGOUT_REDIRECT_URL = '/accounts/login/' 

# --- Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} [{name}] {message}',
            'style': '{',
            'datefmt': '%H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'DEBUG',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'ward_data_app': { 
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}